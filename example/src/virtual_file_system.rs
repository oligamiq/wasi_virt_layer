// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
/// import print: func(msg: string);

#[derive(Debug)]
#[repr(transparent)]
pub struct Wasip1{
  handle: _rt::Resource<Wasip1>,
}

impl Wasip1{
  #[doc(hidden)]
  pub unsafe fn from_handle(handle: u32) -> Self {
    Self {
      handle: unsafe { _rt::Resource::from_handle(handle) },
    }
  }

  #[doc(hidden)]
  pub fn take_handle(&self) -> u32 {
    _rt::Resource::take_handle(&self.handle)
  }

  #[doc(hidden)]
  pub fn handle(&self) -> u32 {
    _rt::Resource::handle(&self.handle)
  }
}


unsafe impl _rt::WasmResource for Wasip1{
  #[inline]
  unsafe fn drop(_handle: u32) {
    #[cfg(not(target_arch = "wasm32"))]
    unreachable!();

    #[cfg(target_arch = "wasm32")]
    {
      #[link(wasm_import_module = "$root")]
      unsafe extern "C" {
        #[link_name = "[resource-drop]wasip1"]
        fn drop(_: u32);
      }

      unsafe { drop(_handle) };
    }
  }
}

impl Wasip1 {
  #[allow(unused_unsafe, clippy::all)]
  pub fn fd_write_import(fd: i32,iovs: i32,iovs_len: i32,written: i32,) -> i32{
    unsafe {

      #[cfg(target_arch = "wasm32")]
      #[link(wasm_import_module = "$root")]
      unsafe extern "C" {
        #[link_name = "[static]wasip1.fd-write-import"]
        fn wit_import0(_: i32, _: i32, _: i32, _: i32, ) -> i32;
      }

      #[cfg(not(target_arch = "wasm32"))]
      unsafe extern "C" fn wit_import0(_: i32, _: i32, _: i32, _: i32, ) -> i32{ unreachable!() }
      let ret = unsafe { wit_import0(_rt::as_i32(&fd), _rt::as_i32(&iovs), _rt::as_i32(&iovs_len), _rt::as_i32(&written)) };
      ret
    }
  }
}
impl Wasip1 {
  #[allow(unused_unsafe, clippy::all)]
  pub fn environ_sizes_get_import(environ_count: i32,environ_size: i32,) -> i32{
    unsafe {

      #[cfg(target_arch = "wasm32")]
      #[link(wasm_import_module = "$root")]
      unsafe extern "C" {
        #[link_name = "[static]wasip1.environ-sizes-get-import"]
        fn wit_import0(_: i32, _: i32, ) -> i32;
      }

      #[cfg(not(target_arch = "wasm32"))]
      unsafe extern "C" fn wit_import0(_: i32, _: i32, ) -> i32{ unreachable!() }
      let ret = unsafe { wit_import0(_rt::as_i32(&environ_count), _rt::as_i32(&environ_size)) };
      ret
    }
  }
}
impl Wasip1 {
  #[allow(unused_unsafe, clippy::all)]
  pub fn environ_get_import(environ: i32,environ_buf: i32,) -> i32{
    unsafe {

      #[cfg(target_arch = "wasm32")]
      #[link(wasm_import_module = "$root")]
      unsafe extern "C" {
        #[link_name = "[static]wasip1.environ-get-import"]
        fn wit_import0(_: i32, _: i32, ) -> i32;
      }

      #[cfg(not(target_arch = "wasm32"))]
      unsafe extern "C" fn wit_import0(_: i32, _: i32, ) -> i32{ unreachable!() }
      let ret = unsafe { wit_import0(_rt::as_i32(&environ), _rt::as_i32(&environ_buf)) };
      ret
    }
  }
}
impl Wasip1 {
  #[allow(unused_unsafe, clippy::all)]
  pub fn proc_exit_import(code: i32,) -> (){
    unsafe {

      #[cfg(target_arch = "wasm32")]
      #[link(wasm_import_module = "$root")]
      unsafe extern "C" {
        #[link_name = "[static]wasip1.proc-exit-import"]
        fn wit_import0(_: i32, );
      }

      #[cfg(not(target_arch = "wasm32"))]
      unsafe extern "C" fn wit_import0(_: i32, ){ unreachable!() }
      unsafe { wit_import0(_rt::as_i32(&code)) };
    }
  }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_run_cabi<T: Guest>() {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();T::run();
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_fd_write_import_wrap_cabi<T: Guest>(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::fd_write_import_wrap(arg0, arg1, arg2, arg3);
_rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_environ_sizes_get_import_wrap_cabi<T: Guest>(arg0: i32,arg1: i32,) -> i32 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::environ_sizes_get_import_wrap(arg0, arg1);
_rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_environ_get_import_wrap_cabi<T: Guest>(arg0: i32,arg1: i32,) -> i32 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::environ_get_import_wrap(arg0, arg1);
_rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_proc_exit_import_wrap_cabi<T: Guest>(arg0: i32,) {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();T::proc_exit_import_wrap(arg0);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_fd_write_export_cabi<T: Guest>(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::fd_write_export(arg0, arg1, arg2, arg3);
_rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_environ_sizes_get_export_cabi<T: Guest>(arg0: i32,arg1: i32,) -> i32 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::environ_sizes_get_export(arg0, arg1);
_rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_environ_get_export_cabi<T: Guest>(arg0: i32,arg1: i32,) -> i32 {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();let result0 = T::environ_get_export(arg0, arg1);
_rt::as_i32(result0)
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_proc_exit_export_cabi<T: Guest>(arg0: i32,) {#[cfg(target_arch="wasm32")]
_rt::run_ctors_once();T::proc_exit_export(arg0);
}
pub trait Guest {
  fn run() -> ();
  fn fd_write_import_wrap(fd: i32,iovs: i32,iovs_len: i32,written: i32,) -> i32;
  fn environ_sizes_get_import_wrap(environ_count: i32,environ_size: i32,) -> i32;
  fn environ_get_import_wrap(environ: i32,environ_buf: i32,) -> i32;
  fn proc_exit_import_wrap(code: i32,) -> ();
  fn fd_write_export(fd: i32,iovs: i32,iovs_len: i32,written: i32,) -> i32;
  fn environ_sizes_get_export(environ_count: i32,environ_size: i32,) -> i32;
  fn environ_get_export(environ: i32,environ_buf: i32,) -> i32;
  fn proc_exit_export(code: i32,) -> ();
}
#[doc(hidden)]

macro_rules! __export_world_virtual_file_system_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[unsafe(export_name = "run")]
    unsafe extern "C" fn export_run() {
      unsafe { $($path_to_types)*::_export_run_cabi::<$ty>() }
    }
    #[unsafe(export_name = "fd-write-import-wrap")]
    unsafe extern "C" fn export_fd_write_import_wrap(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
      unsafe { $($path_to_types)*::_export_fd_write_import_wrap_cabi::<$ty>(arg0, arg1, arg2, arg3) }
    }
    #[unsafe(export_name = "environ-sizes-get-import-wrap")]
    unsafe extern "C" fn export_environ_sizes_get_import_wrap(arg0: i32,arg1: i32,) -> i32 {
      unsafe { $($path_to_types)*::_export_environ_sizes_get_import_wrap_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "environ-get-import-wrap")]
    unsafe extern "C" fn export_environ_get_import_wrap(arg0: i32,arg1: i32,) -> i32 {
      unsafe { $($path_to_types)*::_export_environ_get_import_wrap_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "proc-exit-import-wrap")]
    unsafe extern "C" fn export_proc_exit_import_wrap(arg0: i32,) {
      unsafe { $($path_to_types)*::_export_proc_exit_import_wrap_cabi::<$ty>(arg0) }
    }
    #[unsafe(export_name = "fd-write-export")]
    unsafe extern "C" fn export_fd_write_export(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
      unsafe { $($path_to_types)*::_export_fd_write_export_cabi::<$ty>(arg0, arg1, arg2, arg3) }
    }
    #[unsafe(export_name = "environ-sizes-get-export")]
    unsafe extern "C" fn export_environ_sizes_get_export(arg0: i32,arg1: i32,) -> i32 {
      unsafe { $($path_to_types)*::_export_environ_sizes_get_export_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "environ-get-export")]
    unsafe extern "C" fn export_environ_get_export(arg0: i32,arg1: i32,) -> i32 {
      unsafe { $($path_to_types)*::_export_environ_get_export_cabi::<$ty>(arg0, arg1) }
    }
    #[unsafe(export_name = "proc-exit-export")]
    unsafe extern "C" fn export_proc_exit_export(arg0: i32,) {
      unsafe { $($path_to_types)*::_export_proc_exit_export_cabi::<$ty>(arg0) }
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_virtual_file_system_cabi;
mod _rt {
  #![allow(dead_code, clippy::all)]


  use core::fmt;
  use core::marker;
  use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

  /// A type which represents a component model resource, either imported or
  /// exported into this component.
  ///
  /// This is a low-level wrapper which handles the lifetime of the resource
  /// (namely this has a destructor). The `T` provided defines the component model
  /// intrinsics that this wrapper uses.
  ///
  /// One of the chief purposes of this type is to provide `Deref` implementations
  /// to access the underlying data when it is owned.
  ///
  /// This type is primarily used in generated code for exported and imported
  /// resources.
  #[repr(transparent)]
  pub struct Resource<T: WasmResource> {
    // NB: This would ideally be `u32` but it is not. The fact that this has
    // interior mutability is not exposed in the API of this type except for the
    // `take_handle` method which is supposed to in theory be private.
    //
    // This represents, almost all the time, a valid handle value. When it's
    // invalid it's stored as `u32::MAX`.
    handle: AtomicU32,
    _marker: marker::PhantomData<T>,
  }

  /// A trait which all wasm resources implement, namely providing the ability to
  /// drop a resource.
  ///
  /// This generally is implemented by generated code, not user-facing code.
  #[allow(clippy::missing_safety_doc)]
  pub unsafe trait WasmResource {
    /// Invokes the `[resource-drop]...` intrinsic.
    unsafe fn drop(handle: u32);
  }

  impl<T: WasmResource> Resource<T> {
    #[doc(hidden)]
    pub unsafe fn from_handle(handle: u32) -> Self {
      debug_assert!(handle != u32::MAX);
      Self {
        handle: AtomicU32::new(handle),
        _marker: marker::PhantomData,
      }
    }

    /// Takes ownership of the handle owned by `resource`.
    ///
    /// Note that this ideally would be `into_handle` taking `Resource<T>` by
    /// ownership. The code generator does not enable that in all situations,
    /// unfortunately, so this is provided instead.
    ///
    /// Also note that `take_handle` is in theory only ever called on values
    /// owned by a generated function. For example a generated function might
    /// take `Resource<T>` as an argument but then call `take_handle` on a
    /// reference to that argument. In that sense the dynamic nature of
    /// `take_handle` should only be exposed internally to generated code, not
    /// to user code.
    #[doc(hidden)]
    pub fn take_handle(resource: &Resource<T>) -> u32 {
      resource.handle.swap(u32::MAX, Relaxed)
    }

    #[doc(hidden)]
    pub fn handle(resource: &Resource<T>) -> u32 {
      resource.handle.load(Relaxed)
    }
  }

  impl<T: WasmResource> fmt::Debug for Resource<T> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
      f.debug_struct("Resource")
      .field("handle", &self.handle)
      .finish()
    }
  }

  impl<T: WasmResource> Drop for Resource<T> {
    fn drop(&mut self) {
      unsafe {
        match self.handle.load(Relaxed) {
          // If this handle was "taken" then don't do anything in the
          // destructor.
          u32::MAX => {}

          // ... but otherwise do actually destroy it with the imported
          // component model intrinsic as defined through `T`.
          other => T::drop(other),
        }
      }
    }
  }
  
  pub fn as_i32<T: AsI32>(t: T) -> i32 {
    t.as_i32()
  }

  pub trait AsI32 {
    fn as_i32(self) -> i32;
  }

  impl<'a, T: Copy + AsI32> AsI32 for &'a T {
    fn as_i32(self) -> i32 {
      (*self).as_i32()
    }
  }
  
  impl AsI32 for i32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u32 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u16 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for i8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for u8 {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for char {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  impl AsI32 for usize {
    #[inline]
    fn as_i32(self) -> i32 {
      self as i32
    }
  }
  
  #[cfg(target_arch = "wasm32")]
  pub fn run_ctors_once() {
    wit_bindgen::rt::run_ctors_once();
  }
}

/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_virtual_file_system_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_virtual_file_system_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_virtual_file_system_impl as export;

#[cfg(target_arch = "wasm32")]
#[unsafe(link_section = "component-type:wit-bindgen:0.41.0:wasip1-vfs:host:virtual-file-system:encoded world")]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 673] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\x97\x04\x01A\x02\x01\
A\x13\x03\0\x06wasip1\x03\x01\x01@\x04\x02fdz\x04iovsz\x08iovs-lenz\x07writtenz\0\
z\x03\0\x1e[static]wasip1.fd-write-import\x01\x01\x01@\x02\x0denviron-countz\x0c\
environ-sizez\0z\x03\0'[static]wasip1.environ-sizes-get-import\x01\x02\x01@\x02\x07\
environz\x0benviron-bufz\0z\x03\0![static]wasip1.environ-get-import\x01\x03\x01@\
\x01\x04codez\x01\0\x03\0\x1f[static]wasip1.proc-exit-import\x01\x04\x01@\0\x01\0\
\x04\0\x03run\x01\x05\x04\0\x14fd-write-import-wrap\x01\x01\x04\0\x1denviron-siz\
es-get-import-wrap\x01\x02\x04\0\x17environ-get-import-wrap\x01\x03\x04\0\x15pro\
c-exit-import-wrap\x01\x04\x04\0\x0ffd-write-export\x01\x01\x04\0\x18environ-siz\
es-get-export\x01\x02\x04\0\x12environ-get-export\x01\x03\x04\0\x10proc-exit-exp\
ort\x01\x04\x04\0#wasip1-vfs:host/virtual-file-system\x04\0\x0b\x19\x01\0\x13vir\
tual-file-system\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-componen\
t\x070.227.1\x10wit-bindgen-rust\x060.41.0";

#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
  wit_bindgen::rt::maybe_link_cabi_realloc();
}

